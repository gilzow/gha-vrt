name: 'Visual Regression Testing with Backstop.js'
description: 'Runs visual regression testing with backstop.js between a production site and PR version of a site'
inputs:
  baseline_url:  # owner of the repo
    description: 'The production Url of the site you want to use as the baseline.'
    required: true
  test_url:
    description: 'The URL of the PR site we want to test against the baseline'
    required: true
  report_results:
    description: "Do you want this activity to report the results back to the calling workflow (true) or pass/fail directly (false)? Default is false."
    required: false
    default: 'false'
  paths_location:
    description: "Path to the theme-paths.js file. Default is ./.github/tests/vrt/ from the theme's repo root"
    default: "./.github/tests/vrt/"
  threshold:
    description: 'Percentage of different pixels allowed to pass test'
    required: false
    default: "0.1"
outputs:
  results:
    description: "Reports from VRT"
    value: ${{ steps.report-results.outputs.results }}

# Things we need to do
# Verify the URLs we were given respond?
# Install backstop
# Pass the reference url to backstop
# Run npm run-script backstop:reference
# Pass the test url to backstop
# Run npm run-script backstop:test
# if test fails report back `false` and return the html report?
# if test passes, report back `true`
runs:
  using: "composite"
  steps:
    - name: 'Test Baseline URL'
      id: test-baseline-url
      shell: bash
      run: |
        url=${{ inputs.baseline_url }}
        response=$(curl -s -o /dev/null -I -w "%{http_code}" "${url//http:/https:}");
        if [[ "200" == "${response}" ]]; then
          echo "::notice::Environment responded with http header 200"
        else
          echo "::error::Response from environment was something other than 200. Response returned was ${response}"
          exit 1;
        fi
    - name: 'Test Testing URL'
      id: verify-repo
      shell: bash
      run: |
        url=${{ inputs.test_url }}
        response=$(curl -s -o /dev/null -I -w "%{http_code}" "${url//http:/https:}");
        if [[ "200" == "${response}" ]]; then
          echo "::notice::Environment responded with http header 200"
        else
          echo "::error::Response from environment was something other than 200. Response returned was ${response}"
          exit 1;
        fi
    - name: 'Verify return value'
      id: 'verify-return-vale'
      shell: bash
      run: |
        # we need to make sure they gave us a true/false, yes/no
        if [[ "${{ inputs.report_results }}" =~ "yes" ]] || [[ "${{ inputs.report_results }}" =~ "true" ]]; then
          echo "report_results=true" >> $GITHUB_ENV  
        else
          echo "report_results=false" >> $GITHUB_ENV
        fi
    - name: 'Set path file location'
      id: path-file-location
      shell: bash
      run: |
        # check to see if we have a relative path from the calling repo root
        if [[ "${{inputs.paths_location}}" =~ ^\./ ]]; then
          echo "::notice::Path location is relative to repo root. Setting full path"
          path_location="${GITHUB_WORKSPACE}/${{ inputs.paths_location }}"
        else 
          echo "::notice::Path location is already absolute. No need to adjust"
          path_location="${{ inputs.paths_location }}"
        fi
        
        # now we need to see if we're missing the trailing directory separator
        if [[ "${path_location} =~ [^/]$ ]]; then
          path_location="${path_location}/"
        fi
        echo "::notice::Saving path location as ${path_location}"
        echo "pathLocation=${path_location}" >> $GITHUB_ENV
    - name: 'install backstop'
      id: install-backstop
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        npm install
    - uses: actions/checkout@v3
    - name: access-to-files
      id: access-to-files
      shell: bash
      run: |
        echo "::notice::Do we have access to the repo files that we are being used in?"
        ls -al
    - name: 'build reference'
      id: build-reference
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::notice::Starting backstopjs to generate baseline images using ${{inputs.baseline_url}}."
        npm run-script backstop:reference -- --refURL="${{inputs.baseline_url}}" --testURL="${{inputs.test_url}}" --testPath="${{env.path_location}}"

    - name: 'run test'
      id: run-test
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "::notice::Starting Backstop VRT testing against ${{inputs.test_url}}"
        npm run-script backstop:test -- --refURL="${{inputs.baseline_url}}" --testURL="${{inputs.test_url}}" --testPath="${{env.path_location}}"
        testresults=$?
        if ( 0 !== $testresults ); then
          echo "::error::Backstop visual regression testing failed. Please see the generated report"
          results="false"
        else
          echo "::notice::Backstop visual regression testing passed."
          results="true"
        fi
      
        echo "vrt_results=${results}" >> $GITHUB_ENV

    - name: 'export reports'
      id: export-reports
      if: ${{ env.vrt_results == 'false' }}
      uses: actions/upload-artifact@v3
      with:
        name: vrt-report
        path: |
          ${{ github.action_path }}/backstop_data
          !${{ github.action_path }}/backstop_data/engine_scripts/*

    - name: 'Report Results'
      id: 'report-results'
      shell: bash
      run: |
        # set the output
        echo "results=${{ env.vrt_results }}" >> $GITHUB_OUTPUT
        
        if [[ "false" == "${{ env.report_results }}" ]]; then
          # they want the action result to be the same as the VRT result
          exitcode=$([ "true" = "${{ env.vrt_results }}" ]);
          exit ${exitcode}
        fi
